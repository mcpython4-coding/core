These is an tasklist covering all different tasks these project has.

cleanup tasks (should be done regularly):
    document every change
    go to EVERY PYTHON FILE and do:
        have we unused imports? -> delete
        look at EVERY name and check if it is good
        has every file, class & function an docstring?
        is the code with enough comments?
        is every code reachable?
        have we outdated code which should be updated?
        is there an way for every interested function / field to overwrite
        could this file split into different?
        could this class be split into separate / super - child classes?
        could this function be split into different for better handling?
        should be this function be part of the util-code?
        is there any library or any code around web that does this better / can replace this?
        should be some of these code be part of an load-event?
        should be any of this classes/objects/functions be part of an registry?
        are here any texture-generating codes which can be represented by texture generator code?
        could be parts of these generated on setup?
        is there code which should be as config / world config / world storage data stored?


make an load.py file with most of the content of the __main__ file and the __main__-file should only launch it
add an setup.py-file for setting up all code fragments, make an event for it, use load.py to get data and then launch
    event
add save / load of world
add PlayerCreativeInventory, PlayerCreativeTab
add /loot-command
implement hitbox system
todo: fix bug: in some rare cases, you can walk through the corner into the block (see forgleman #104)
add can_break-attribute to item to definite items that can break blocks in gamemode 2
add the following block inventorys: crafting table, furnes and furnes-like inventorys, brewing stand, anvil, enchantment table
add Enchantment-baseclass with attribute is_combine_able_with(...) -> bool & all enchantments
add Tool-baseclass and Tool-durability
optimize BlockItemGenerator to have shorter times
add commands: /me, /say, /msg, /tellraw, /title, /replaceitem, /debug, /reload (real command), /clone
add breaktime-attribute to Block, use it in window break system (also in StatePartGame)
add datapacks with .mcfunction-files, add resourcelocator binding for recipes, add /function & /shedule -command
fix missing resize of image-parts when using only a part of it
make the following attributes as json-saved files: Block.is_break_able, Block.break_time, Item.tool_types, Item.max_durability, Item.breaktime_of
add update.py for downloading latest build of mcpython and unpacking it
add ItemModelLoader
add ModInterface
add time-system and /time-command
add scoreboards
add entitys with handler, add an batch to system for rendering them OR use seperated classes (branch created)

implement client/server by making an @client and @server notation system which will decide returning an callable object
    representing an network or direct access to the function (so afterwards changeable by joining server)

implement pre-build system:
    add an auto-valid-check which will rebuild parts automatically when changed
    add event called system:rebuild which is callen when its time to rebuild
    rewrite recipe loading & checking to NOT use ItemStack
    create an build-folder for storing the stuff which was generated and some index files which store the state of the
        system
    compress block factory files, item factory files
    add some kind of info for the player what is currently done
    texture atlas will be pre-builded an named minecraft_1.png (mods will have [modname]_[n].png)
    an global table called texturemap.json which links texture ids to atlases
    models will be pre-prepared and stored in an format pointing by texture only to the texture id
    crafting recipes will be also pre-prepared for better loading times & will be removed if invalid
goal: make the code multiprocessing based


How-To:
    1. pyglet MUST be imported in an extra process
    -> the rendering thread will do it for you
    2. Their must be an way to share objects/functions across processes


possible processes:
    - ProcessCom-class for providing an data pipeline between processes with various modes [e.g. python >= 3.8 ->
            SharedMemory]
    - make something like an GlobalProcessCom which is handled by an Process-specific handler which has installed an
        flag storing if OpenGL can be used (make something like an callOpenGLFunction(name: str, *param)-function which
        calls the OpenGL function on the OpenGL process
        -> this COM should also include something like an event-backend which helps calling events across the processes
        -> and an WorldAccess with function like add_block, remove_block, get_block, show_block, hide_block, ... which
            has an additional parameter called wait_on_success which will wait until the task was executed when needed
            making sure you can work in the future with this, otherwise return an ticket id which links to an flag in
            the SharedMemory which will be removed when the task is finished on the other side
    - system to share the world across the processes using shared memory or something like this
    -> WARNING: OpenGL can ONLY be used in one process; make sure that this is active, using e.g. an flag stored
        somewhere

    - main thread (in which pyglet runs)
    - world thread (in which the whole world lives and is handled)
    - generation thread(s): for generation code, maybe split up per-layer
    - command execution: execute commands in separated process, create COM for sending commands in
    - client / sever split-up
    - random updates

    - make blocks & item-stacks shareable


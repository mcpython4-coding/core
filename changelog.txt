Changelog since cleanup-branch of 31.01.2020
todo: make into an .md file


planned for the future (in "[]", priority, with 1 the highest and positive inf lowest and an marker for implementation
        before next stable release):
    - optimize texture reload with everything (re-block-item-factories, reload block models,
        reload item texture, gui textures, ...), config reload [1]
    - add more factories for various parts (better block models, block states, full block factory, ...) [2]
    - add scoreboards with commands, execute entry, ... [5]
    - make world gen more fail-save [2]
    - add ores [4]
    - add mcpi API support [10]
    - an logging update [4]
    - tool level system based on an enum-list-like system were every block defines an Enum-entry for minimum [7]
    - rendering helper class for setting up things like 3d rendering, alpha usage, ... [more functionality] [5]
    - add an line into logging where the system searches for the location where the error occur and will link the mod
        caused it into the log [6]
    - parser for the new mc dimension config format [20]
    - mdk kit with setup and launcher binding [11]
    - add an mode where the window opens only when the load is complete [100]
    - add an "show"-mode where the user is forced into one single world loading immediate when entering the game
        and when the user tries to go back to start menu, the game is closing. [change button text for that] [100]
    - add TranslationComponent-class supported by buttons, labels, ... to dynamic cache the translation [30]
    - implement glsl language adapter (see https://www.pythonstuff.org/glsl/example_2_glsl_with_pyglet.html) [110]
    - implement lighting [1000]
    - implement more UI element parsers [5]
    - port every state configuration to config files [6]
    - launcher system to download mc assets separately [10]
    - entity AI system [30]
    - rendering layer system [20]
    - make loot table system only load needed loot tables, etc. [10]
    - an indicator for corrupted save files (add an number to an counter and remove when action finished) [1]

information on development:
    - the development is split up into 3 phases: the dev-branch with changes to the code, snapshots pushed to release,
        but not published as releases on github, and the final releases pushed to release-branch and published as#
        an release
    - developing happens also on feature branches were bigger features can be tested. It is not guaranteed that any
        if this features will make its way into the final release.
    - PR's should target master or in some cases the feature branches, only for critical bug fixes the release-branch
    - this file will keep track on every development leading into an snapshot or release. The dev-branch will be used
        for creating the entries. Every new snapshot changelog starts with "changelog of <type> <name>" with optional
        following the theme of the snapshot, the release date and additional information. The changelog than can
        be in two formats:
        a) when not released yet:
            - an list of changes in the order of introduction
        b) in the final release:
            - an grouped list of changes after topic in an logical order with all not noticeable changes removed
        both can be followed by an table of issues starting with "fixed issues:" followed by an list of grouped after
        first obscures of the bug the list of issues with an short description and when based on an github bug report
        its id.


changelog of snapshot [next] (theme: fixing stuff & upgrading base to 1.16)
    - improved rendering system by using MatrixStack's and RenderingHelper-instances
    - improved data fixer system
    - changed how item textures are baked together
    - SHIFT-drag support in inventories
    - improved command handling
    - deprecated old AdvancedBlockFactory system
    - added CombinedBlockFactory system for doing fancy stuff with data gen & in-game objects at ones
    - updated textures to 1.16 and added content of the update
    - added --enable-all-blocks runtime flag for enabling all optional blocks
    - added profiler for world generation
    - added button to delete world in world selection screen
    - registries get now "locked" after mod loading finished (they are still write-able, but this will get removed in
        the future as it will get replaced by reload-registries-events)

    fixed issues:
        from previous snapshot:
            - ordering of world selection list was wrong
            - world selection screen was not rendering all possible worlds
            - ShiftContainer was miss-behaving in certain cases
            - registry info was not dumping data correctly
            - exceptions when no save file exists
            - data fixer results may not be saved correctly
            - exception when world selection screen is empty
            - world selection screen was parsing name incorrectly

        long-term issues:
            - rendering helper was miss-doing some stuff
            - debug world was displaying some block states more than one time
            - exceptions were printed into log when loading an saved debug world
            - .setGlobalModName() on ItemFactory did not work correctly
            - ItemAtlas was crashing on missing texture file instead of replacing with missingtexture.png
            - ItemFactory's template system was broken

changelog of snapshot 20w25a released on 18.06.2020 (theme: data fixers and API improvements)
    Rendering:
        - added state part serializer for progress bar
        - generation screens
        - implemented world list with selection. Moved world name enter into world generation settings screen
        - added UI element for scroll bars

    Saves:
        - rewritten data fixer system. Incompatible with old one. Old stuff still arrival, but deprecated
        - old worlds are still load-able as data-fixers were ported

    Console:
        - improved loading
        - changed some logging systems

    Commands:
        - added /shuffledata command for shuffling recipes & loot table outputs with other ones
            (must be activated in config files)

    Modding:
        - added data gen system for textures
        - changed order of loading stages to be more functional

    Loot tables:
        - implemented two new loot table conditions: minecraft:block_state_property and minecraft:damage_source_properties

    Entity API:
        - added DamageSource class

    fixed issues:
        long-term issues:
            - crafting output slot was added to inventory
            - loading bars of mod loading where not in the middle
            - % in world gen / load screen was calculated wrong leading into negative %
            - crafting slot could get saved when closing the game

        since last snapshot:
            - generator for recipe generator was not parsing output correctly leading into errors in the recipes


changelog of snapshot 20w24a released on 10.06.2020 (theme: refactoring & data generators)
    WARNING: this snapshot WILL break some backward-compatibility as it moved a lot of stuff around. Use the constants
        in globals.py for allocation.
    WARNING: this snapshot adds data generators. They are useful, but currently complicated to set up. We will add
        in the future an mdk generator script for setting up an mdk package with all run-configurations,
        launcher bindings and useful helper scripts like building it into an final zip file
    WARNING: this snapshot changed the way how the dev-environment is packaged. This may lead into problems
    WARNING: this snapshot changed the way how final end-user directories look like and what can be modified,
        See globals.py for the locations, do NOT use G.local+"/build/[...]", use G.build+"/[...]"!!!!
    WARNING: as data generators are now an thing, you can NOT rely on that your game will load up completely as an mod.
        There is the extreme "--data-gen --exit-after-data-gen --no-window" mode in which no window will open
        (and as so now draw-events or user interactions are called, only ticks) and the game will exit after the
        data gen is finished (via an extra loading stage)

    - added system to build the project into one stand-alone zip-archive

    Modding:
        - changed version tuple builder for mcpython
        - added data generator system, moved a lot of internal stuff to there, mods are free to use it
        - data generators are arrival for BlockModel's, BlockState's, EntityModel's, Recipes and Tags
        - as the data gen system exists, the old factories for data-gen-converted stuff are now deprecated and will be
            removed until a1.5.0

    Debugging:
        - added profiler system with config options
        - made inventory interaction subscriptions more fail-self

    Project Structure:
        - refactored most of the stuff into the mcypthon-folder, but the folder itself is added to sys.path for backward
            compatibility [WARNING: this is an breaking change!!!!!!!!]
        - refactored much not-code related files into the home-folder
        - refactored & unpacked assets into the resources-folder
        - moved crafting-folder to gui/crafting, old interfaces still exists, but are deprecated

    Execution:
        - added the following command line arguments: --data-gen. --exit-after-data-gen and --no-window.
            First will generate the data (the data gen for the core will only work in dev-environment), second will
            auto-exit the game when data-gen is finished (needs --data-gen also) and last will not open an window.

    fixed issues:
        long-term issues:
            - barrel rotation was not saved
            - shift-clicking the output-slot of the crafting gave an exception
            - closing the crafting table was deleting all items which were in the crafting grid

        from previous snapshot:
            - dicts in config file failed to load
            - booleans where not correctly loaded


changelog of snapshot 20w22a released on 30.05.2020 (theme: feature cleanup & improvements)
    Rendering:
        - optimized block rendering
        - re-ordered some UV-related stuff, you may want to update your own models

    Modding:
        - improved dependency system for mods
        - added config system for mods & internals [incompatible with mc config files]

    Factories:
        - improved existing factories & added some more factories & entries

    Logging:
        - improved exception handling

    States:
        - added StateConfigFile.py handling State-config-files

    - deprecated a lot of stuff

    fixed issues:
        from versions before this snapshot:
            - block updates were not called in every case
            - walls and fences were not updating their state correctly
            - during printing an exception, an new exception could occur
            - event "worldgen:chunk:finished" was not called in most cases
            - data packs may not get unloaded when they needed to

changelog of release alpha 1.0.1
    fixed bugs:
        from previous release:
            - fixed crash on startup
            - when loading an world from an never save version, the game gives out an exception


changelog of release alpha 1.0.0: (theme: bug fixing & system improvements)
    during developing more features, the developer has decided to discard the progress. As some more difficulties had
    occur [Covid-19], the development time for these dev-cycle was far longer than expected.

    Event-system:
        - resize-event is called after every state switch now
        - improved mod loading stage calling
        - new loading events: "stage:block:factory:finish" and "stage:item:factory:finish"
        - changed signature of on_shift_click(x, y, button, modifiers, player) of slot to
          (slot, x, y, button, modifiers, player)

    Code optimisations:
        - refactored ModLoader-class & optimized some loading systems

    Mod loading:
        - added new mod.json file version
        - added @globals.modloader(<modname>, <eventname>, [<info>]) annotation

    Launch flags:
        - added --fullscreen -flag for enabling fullscreen on startup [unstable at the moment]

    Error handling:
        - improved error message when world save not found on load
        - improved exception handling by logger

    World generation:
        - improved world gen, rewritten how tasks are stored & scheduled (!)

    Tags:
        - removed tag #minecraft:furnace_fuel and replaced by an hasattr(item, "FUEL") check

    fixed bugs:
        long-time issues:
            - state of block may not be set correctly in some cases
            - memory leaks all over the place
            - offhand slot gets cleared when closing inventory
            - crash when build-folder was deleted
            - exceptions when using show-tasks in world gen arrays
            - a lot of normal fuels were not accepted by furnace as fuels


changelog of snapshot 20w14a
    Events:
        - added new event: "stage:blockitemfactory:finish"
        - changed some internal inventory interaction things
        - added loading phase for entities

    code improvements:
        - cleaned up base classes for block and item
        - moved Entity-class into entity/Entity.py

    Save files:
        - chunk entries containing positions are mostly stored relative to the chunk decreasing save file size
        - added saves for entities

    GUI interaction:
        - rewritten mouse interaction system to support dragging over more than one slot & better shift-clicking
        - on_shift_click can now return True when it should interrupt the following logic
        - slots can now handle an key press

    Entity system:
        - entities are now saved in saves
        - added EntityHandler with entity-registry
        - made function draw and tick called of entity
        - added EntityRenderer with parser of model files
        - added renderer for player
        - added player skins based on the player name downloaded from the official mojang servers

    Commands:
        - added /summon command

    fixed bugs:
        long-time issues:
            - internal mouse-position error when dragging [since introduction of mouse position entry]

        since introduction of game rules:
            - block-looking-at position lable was inverted to the gamerule

        since introductions of inventories to saves:
            - game gives out exceptions when trying to load an non-existing world
            - crash when inventory slot count decreases between two loads of an world


changelog of snapshot 20w12b [released on 21.03.2020]
    Dimensions:
        - added dimension definition for nether and end

    Mod system:
        - removed deprecated loading phases
        - removed features.py as it was outdated

    World saves:
        - world is now saved when window is closed (only when in the state)

    Blocks:
        - added mycelium block, podzol block, barrier block
        - BlockFactory accepts now also an state-str like in block-state-files in setDefaultModelState

    Items:
        - added barrier item

    Language:
        - .lang files can now be also loaded

    Rendering:
        - added support for uv rotation in element of block-models

    fixed bugs:
        since Registry-update II:
            - Chunk.add_block did NOT accept the non-prefixed block-names like "stone"

        long-time issues:
            - icon for half hunger was not rendered correctly
            - BlockItemFactory failed to load block-items when not rebuilding for new blocks since last rebuild. This
                occur only in first run due to missing _finish call of ItemFactory-instances

        model system issues:
            - rotation of BlockModels was not working
            - multipart models failed to load when an entry had an list of models


changelog of snapshot 20w12a [released on 16.03.2020]
    Loot tables:
        - added class for LootTable, added sub-classes for generating the content
        - added base classes for loot table function and conditions

    Mod system:
        - added loading phase for adding loot tables

    Blocks:
        - added drops to blocks
        - added option to chest to load loot table into the inventory
        - added starter chest

    Commands:
        - added /loot command

    Rendering:
        - added loader for OpenGL-only scripts (stored in .gl files, loader under rendering/OpenGLSetupFile.py)
        - alpha blending has now disabled cull face in OpenGL to render also back-faces to user

    fixed bugs:
        model system issues:
            - rendering of multi-part models with OR condition fails due to wrong condition check
            - rendering of some blocks failed
            - custom block renderers were not working as expected

        long-term issues:
            - items in hotbar do not render in some cases
            - open inventory list of InventoryHandler gets reversed every ESC-press
            - shift crafting was duplicating output


changelog of snapshot 20w11a [released on 12.03.2020]
    Rendering:
        - re-added support for custom block renderers
        - added support for OR-condition in block-states
        - block-states act when selecting from multiple models better
        - block models can now rotate themselves
        - improved block-showing performance by caching (rotated) vertices and texture data
          [this affects also world gen time]

    World generation
        - tweaked generation system to look faster (and be faster)
        - world generation is now done parallel across up to 5 chunks [not thread-parallel]
        - added an world-generation progress-view screen like in MC

    Config:
        - added config for height of world [used in BiomePlains to calculate the height map range]
        - added config for how far the world is generated when you are in-game, default is 1 chunk in each direction

    World saves:
        - added system for storage of worlds with serializers and data fixers [data fixers are unused at the moment]
        - added option to inventories and blocks to add custom data to save with it (items had such an function before)
        - added save-access-screen, save-loading screen

    Mod system:
        - mod versions should be now tuple instead of any-type
        - rewritten version compare system to be based on tuples (work with lower and upper bound for versions)

    Entities:
        - improved entity API

    Code improvements:
        - renamed some stuff to better match
        - moved player instances to World.players
        - player interaction methods now include also the player instance itself

    fixed bugs:
        command issues:
            - /generate <cx> <cz>-command was not working
            - block entries in commands were requiring the mod-prefix

        long-term issues:
            - seed was ignored by generation system
                -> noises for world gen were NOT based on world seed
                    [noticeable when loading an world and generating new chunks]

        rendering issues:
            - slabs were rendered upside-down
            - carved pumpkin item was the same as pumpkin

        - unbreakable blocks could be broken in gamemode 0


changelog of snapshot 20w10a [released on 04.03.2020]
    - updated libraries

    Datapacks:
        - added datapack support

    Commands:
        - added gamerules
        - new commands: /clone, /tell, /replaceitem, /gamerule

    Rendering:
        - added multipart-block-model support
        - added generator code for creating BoundingBox from BlockState
        - BoxModels will now rotate properly relative to middle of block, not only changing textures

    Blocks:
        - added new blocks: fences, walls

    Events:
        - TickHandler has now an function to tick an function as fast as possible

    Config:
        - added option for fog distance

    fixed bugs:
        long-term issues:
            - various exceptions from left-over things in the registry & slot changes from last snapshot
            - various issues with slot drawing

        - fixed exception on shift-clicking crafting output of main inventory


changelog of snapshot 20w09a [released on 26.02.2020]
    Rendering:
        - changed TextureAtlas-block-addition system to be based on mod-based/texture size-based atlases
        - USE_MISSING_TEXTURES_ON_MISS_TEXTURE config option is now False by default

    Blocks:
        - new blocks: furnace with inventory & crafting, barrel, ice variants, bone block, book shelf, coral blocks,
                      pumpkin, carved pumpkin, melon, clay, coarse dirt, prismarin blocks, dried kelp block, end stones,
                      glowstone, magma block, mossy stone bricks, nether bricks, nether wart block, netherrack,
                      purpur blocks, quartz slab, red nether bricks, smooth quartz slab, soul sand
        - Block-class has now an CUSTOM_WALING_SPEED_MULTIPLIER-attribute used for custom waling speeds ontop of blocks

    Inventory Interaction:
        - added key "E" to close various inventories

    Mod system:
        - changed mod.json format to have an "version"-attribute & an "loader"-attribute

    Code improvements:
        - changed some get_name-methods to NAME-attribute
        - removed some deprecated things

    Events:
        - changed how things are registered, THIS IS AN BRAKING CHANGE!

    fixed bugs:
        command issues:
            - game crashes when using "/tp <position>"-command

        rendering issues:
            - debug world doesn't use the block state definition correctly [This issue appeared very often down the road]
            - some chest textures were not drawn correct

        interaction issues:
            - can't get items out of an tag-handled slot
            - cobblestone was not arrival

        mod loading issue_
            - crash when not arrival python file is linked from mod.json file
            - crash when block-name-prefix is no mod-prefix
            - crash when model-name-prefix is no mod-prefix

changelog of snapshot 20w07a [released on 10.02.2020]
    based on: rendering update branch 1 & changes to master-branch

    Rendering:
        - block textures are now cut out to squares making animated textures load only the first texture, but not the
          whole
        - rendering support for "uv" coordinates
        - TextureAtlas will now resize automatically to new size if needed
        - changes the way how html characters are escaped in chat
        - changed the way how block faces are stored
        - removed custom block renderers for the moment
        - blocks are now rendered face-by-face instead of all faces at ones

    Config:
        - inventory config has now an option to offset the background
        - added config for USE_MISSING_TEXTURES_ON_MISS_TEXTURE

    Resource handling:
        - ResourceLocator.add_resources_by_modname's directory parameter is now optional
        - ResourceLocator.add_resources_by_modname will now also load tags

    Blocks:
        - added new blocks: brick slab, glass, stained glass, carpets, sandstone
        - added grass <-> dirt convert

    logging:
        - log contains now some os-specific information
        - crashes on mod bus do not crash the game any more

    Screen Info:
        - added some memory & cpu usage information

    Special keys:
        - added hot-keys: F3+A, F3+C, F3+C for 10s, F3+D, F3+I, F3+N and F3+T

    fixed bugs:
        mod system issues:
            - exceptions when trying to load recipes from an namespace with sub-recipe-folders
            - models in sub-directories where not loadable
            - on_remove function was not called correctly when an block was removed

        event issues:
            - fixed random updates
            - block inventories were not closed when block holding the inventory was removed
            - mouse button up is in some cases not handled correctly
            - closing crafting tables could duplicate output
            - when braking an chest, items were deleted

        rendering issues:
            - some textures were blurry
            - info label in-game were drawn offset in resized windows
            - chat was in some cases not displaying text correctly

        - various crashes & exceptions in log

changelog of snapshot 20w05a [released on 01.02.2020]
    based on: cleanup-branch version 1 [merged on 01.02.2020 onto master]
    - updated textures to 1.15.2
    - upgraded libraries

    informal:
        - added an file called "events.list" storing every event ever called

    Events:
        - added loading event called "stage:block:block_config" called to register block config entries
        - add new events: "command:clear:start", "command:clear:end", "command:give:start", "command:give:end",
                      "command:help:generate_pages", "command:parse_bridge:setup", "command:execute_command",
                      "command:registryinfo:parse", "chat:text_enter", "inventory:show", "modloader:mod_found",
                      "itemhandler:build:atlases:save", "itemhandler:build:atlases:load", "state:switch:pre",
                      "state:switch:post", "modelhandler:searched", "worldgen:chunk:finished", "player:die",
                      "world:reset_config", "dimension:chane:pre", "dimension:chane:post", "world:clean", "game:close",
                      "resources:load", "resources:close"
        - deprecated call_until_equal, call_until_getting_value and call_until_not_equal of EventBus, use call_until
          instead
        - added instant_ticks-attribute to TickHandler
        - added system to check if prebuilding was interrupted before in which case prebuilding would activate again

    Rendering:
        - split up ICustomBlockRenderer into IStaticCustomBlockRenderer and IObjectedCustomBlockRenderer
        - added real config background
        - chat accepts now the DELETE key, the END key and the BEGIN key

    Startup flags:
        - added new run option: --debug-world which sets the world generator to debug

    logging:
        - added logger system
        - better exception handling

    code improvements:
        - moved some project file

    - fixed bugs:
        rendering issues:
            - loading bar was offset
            - game was crashing when hovering over an button
            - chat was "open" until first opening

        world generation issues:
            - debug world generator was not working
            - chests & ender chests were not working in debug world
            - chat marker for active writing position was not correct drawn
            - chat was doing bad stuff with strings like "&#38;"

        - raw crash in BlockItemGenerator
        - possible infinite loop in deleting directories when files where opened
        - mod list storage was not correctly saved

todo: add an changelog for past version(s)


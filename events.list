Every event here listed with "<...>" is an older event which (might) get updated in the near future to another event.
These events WILL mostly get removed in the future. Make sure that you are aware of that!!!!!!

At the end of the file, you will find an list of removed events from this file and their former usage.


commands:
    command:parser:execute(CancelAbleEvent, str command, ParsingCommandInfo): called when an command is starting
        to be executed

    command:clear(CancelAbleEvent, ParsingCommandInfo): called when /clear is executed
    command:clear:entity(CancelAbleEvent, ParsingCommandInfo, Entity): called for every entity affected by /clear.
        Will cancel /clear only for THIS entity
    command:clear:finish(ParsingCommandInfo): called by command "/clear" on end of clearing inventory

    command:clone:block_map(ParsingCommandInfo, dict): called when data is collected together with the data table
    commands:registryinfo(CancelAbleEvent, str registry, ParsingCommandInfo): called by /registryinfo when entered
    command:datapack:release(ParsingCommandInfo): called when /datapack release is called

    "command:help:generate_pages": called on CommandHelp's page generation, called with the page list as an parameter [deprecated]

    "chat:text_enter": called by chat when ENTER is pressed, cancelable in G.chat [cancels the execution, but will call
        all following subscribers] [deprecated]

Reloading:
    data:reload:cancel(CancelAbleEvent): called when the system should reload. Canceling will cancel reload
    data:reload:work(): called to reload stuff
    data:blockstates:custom_injection(ModelHandler): called by ModelHandler to re-inject custom block state definitions
    data:models:custom_injection(ModelHandler): called by the ModelHandler to re-inject custom models
    data:loot_tables:custom_inject(LootTableHandler): called by LootTableHandler to re-inject custom loot tables

    data:shuffle:all: called by /shuffledata when it is time to shuffle it
    data:shuffle:clear: called to clear up the shuffling (if needed) when e.g. exiting an world

crafting:
    craftinghandler:reload:pre(CancelAbleEvent, CraftingHandler): called by crafting handler on reload begin
    craftinghandler:reload:intermediate(CraftingHandler): called intermediate of reloading
    craftinghandler:reload:end(CraftingHandler): called after crafting reload

    gui:crafting:grid:output:remove(GridRecipeInterface, Slot output, Slot[][] input, IRecipeType recipe):
        called when an grid output is removed leading into an crafting update

registry:
    registry:commands:register(CancelAbleEvent, Command, ParseBridge): called when an command is registered

    registry:{name}:register(CancelAbleEvent, Registry, object content, bool override_existing): called when an
        object is registered into {name}

    "datapack:load": called when an new datapack is loaded with the datapack object
    "datapack:unload:pre": called before datapacks are unloaded
    "datapack:unload:post": called after the datapacks were unloaded
    "datapack:reload": called after the datapack system was reloaded
    "datapack:search": called when it is searched for datapacks

inventory:
    inventory:show(Inventory): called by InventoryHandler with the inventory if its shown
    inventory:show:{class name}(Inventory): Special event for class inventory show
    inventory:hide(Inventory): called by InventoryHandler with the inventory if its hidden
    inventory:hide:{class name}(Inventory): Special event for class inventory hide

items:
    "itemhandler:build:atlases:save": called by ItemHandler when the table of item data is saved
    "itemhandler:build:atlases:load": called by ItemHandler when the table of item data is loaded

mod loader:
    modloader:location_search(list[str]): called by ModLoader with the list of possible mod directories/files.
        used to modify things
    modloader:mod_entered_stage(CancelAbleEvent, stage, event, Mod): called by ModLoader when an new stage for an mod is
        started. When canceled, event cluster for mod will be skipped
    modloader:mod_registered(CancelAbleEvent, Mod): called by ModLoader when an new mod tries to be loaded. canceling
        will prevent the mod from registering
    modloader:finished(): called by ModLoader when it finished loading

interaction:
    "gameloop:tick:start": called on beginning of every tick with the elapsed time since last tick
    "gameloop:tick:end": called on end of every tick with the elapsed time since the last tick
    "user:mouse:press": called with x, y, button and modifiers when the user presses the mouse
    "user:mouse:release": called with x, y, button and modifiers when the user releases the mouse
    "user:mouse:drag": called with x, y, dx, dy, buttons and modifiers when the user drags the mouse
    "user:mouse:scroll": called with x, y, scroll_x and scroll_y when the user scrolls the mouse wheel
    "user:mouse:motion": called with x, y, dx, dy when the user moves the mouse
    "user:keyboard:press": called with symbol and modifiers when the user presses an key on the keyboard
    "user:keyboard:release": called with symbol and modifiers when the user releases an key on the keyboard
    "user:window:resize": called with the new size as x and y when the user resize the window

drawing:
    "render:draw:pre_clear"
    "render:draw:pre_setup"
    "render:draw:2d:background_pre"
    "render:draw:3d": called to draw in 3d
    "render:draw:2d:background", "render:draw:2d" and "render:draw:2d:overlay": called to draw 2d, called in the order
        listed here
    "user:keyboard:enter": called with the text if the player enters an text
    "render:draw:post:cleanup"

states:
    "state:switch:pre": called by StateHandler before the state is switched, cancelable
    "state:switch:post": called by StateHandler after the state is switched
    "stage:blockitemfactory:finish": called when blockitemfactory finished

rendering:
    "modelhandler:searched": called by ModelHandler after lookup for models
    "textures:atlas:build:pre": called before TextureAtlases for blocks are saved
    "textures:atlas:build:post": called after TextureAtlases for blocks were saved

world generation:
    "worldgen:chunk:finished": called by WorldGenerationHandler when an chunk was finished in generation
    "seed:set": called when an new seed was set, seed is stored in G.world.config["seed"]

gameplay:
    gameplay:player:pick_up_item(CancelAbleEvent, Player, ItemStack): called by Player class when an item is scheduled
        for addition to the player inventory
    gameplay:player:scheduled_die:pre(CancelAbleEvent, Player, bool drop_items, bool kill_animation,
        DamageSource damage_source, bool test_totem): Called when the player is starting to be killed
    gameplay:player:scheduled_die:between(CancelAbleEvent, Player, bool drop_items, bool kill_animation,
        DamageSource damage_source, bool test_totem): Called when the player is killed, but the inventory is not cleared
    gamplay:player:die(Player, DamageSource): Called when the player died

    world:entity:teleport(CancelAbleEvent, Entity, tuple position, int dimension, bool force_chunk_save_update):
        called when an entity starts teleport-ing
    world:entity:teleport:post(Entity): called after an entity was teleported

    "world:reset_config": called when the world config should be reset
    "dimension:chane:pre": called before the dimension is changed with from and to, cancelable
    "dimension:chane:post": called after the dimension is changed with from and to
    "world:clean": called to clean up the whole world
    "game:gameloop_startup": called direct after the window was created
    "game:startup": called direct before the main gameloop starts
    "game:close": called at the last possible spot before the game closes
    "resources:load": called when the resourelocations are loaded
    "resources:close": called when all resourcelocations are closed
    "prebuilding:finished": called after prebuilding is finished

hotkeys:
    "hotkey:chunk_reload": called with key combo F3+A, used to reload all chunks
    "hotkey:game_crash": called with key combo F3+C for at least 10s, used to crash the game
    "hotkey:get_player_position": called with key combo F3+C for less than 10s, used to get player position
    "hotkey:clear_chat": called with key combo F3+D, used to clear the chat(history)
    "hotkey:copy_block_or_entity_data": called with key combo F3+I, used to get the block data to clipboard
    "hotkey:gamemode_1-3_toggle": called with key combo F3+N, used to toggle gamemode
    "hotkey:reload_textures": called with key combo F3+T, used to reload textures

data generation [loading event]:
    "special:datagen:configure": called by the data generation system in order for mods to generate their datagens

removed:
    "command:clear:start": previous event for /clear command
    "command:clear:end": previous event for /clear command
    "modloader:mod_found": previous called by ModLoader when an mod-instance was created
    "command:reload:start": previous reload event
    "command:reload:end": previous reload event
    "command:give:start": previous /give event
    "player:die": previous kill player event
    "command:registryinfo:parse": previous registryinfo event
    "command:parse_bridge:setup": previous command parser event
    "command:execute_command": previous command execute event
    "craftinghandler:reload:start": previous crafting handler reload event
    "craftinghandler:reload:finish": previous crafting handler end event
    "registry:{registry name}:on_object_register": previous registry enter event

